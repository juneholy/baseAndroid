apply plugin: 'com.android.application'           //码应用了Android 程序的gradle插件，作为Android 的应用程序，这一步是必须的，因为plugin中提供了Android 编译、测试、打包等等的所有task。

android {                //是编译文件中最大的代码块，关于android 的所有特殊配置都在这里，这就是我们前面的声明的 plugin 提供的。
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {                     //程序的默认配置，注意，如果在AndroidMainfest.xml里面定义了与这里相同的属性，会以这里的为主。
        applicationId "com.example.houlinjiang.baseandroid"  //在我们曾经定义的AndroidManifest.xml中，那里定义的包名有两个用途：一个是作为程序的唯一识别ID,防止在同一手机装两个一样的程序；另一个就是作为我们R资源类的包名。在以前我们修改这个ID会导致所有用引用R资源类的地方都要修改。但是现在我们如果修改applicationId只会修改当前程序的ID,而不会去修改源码中资源文件的引用。
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {    //定义了编译类型，针对每个类型我们可以有不同的编译配置，不同的编译配置对应的有不同的编译命令。默认的有debug、release 的类型。
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
//        debug {
////每当创建一个新的build type 的时候，gradle 默认都会创建一个新的source set。我们可以建立与main文件夹同级的文件夹，根据编译类型的不同我们可以选择对某些源码直接进行替换。
//        }
    }

//    flavorDimensionList "color" ,"price"
//    productFlavors {
//        red {
//            flavorDimension "color"
//        }
//        blue {
//            flavorDimension " color"
//        }
//        free {
//            flavorDimension "price"
//        }
//
//        paid {
//            flavorDimension "price"
//        }
//
//    }
//    productFlavors {
//
//        //默认版本,不设置 applicationId ,继承 defaultConfig 中的配置
//        flavors_default {
//        }
//
//        //开发版本, applicationId 替换为 com.littlejie.multichannel.dev
//        flavors_dev {
//            applicationId "com.example.houlinjiang.baseandroid.dev"
//        }
//
//        //发布版本, applicationId 替换为 com.littlejie.multichannel.dev
//        flavors_release {
//            applicationId "com.example.houlinjiang.baseandroid.release"
//        }
//    }
//    sourceSets.main{
// 配置本地 .so库。在配置文件中做如下配置，然后在对应位置建立文件夹，加入对应平台的.so文件。
//    }
//    signingConfigs {
//        release {
//            storeFile file("")
//            storePassword ""
//            keyAlias ""
//            keyPassword ""
//        }
//    }
}

repositories {
//    maven {
//        url ""
//        credentials {
//            username ''
//            password ''
//        }
//    }
//    lvy {
//
//    }
//    flatDir { // 本地仓库
//        dirs ''  // 相对路径
//    }
    mavenCentral()
    jcenter()
}
//每个库名称包含三个元素：组名:库名称:版本号,

//通过files()方法可以添加文件依赖，如果有很多jar文件，我们也可以通过fileTree()方法添加一个文件夹
dependencies {
    //gradle 的依赖配置。它定义了当前项目需要依赖的其他库
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.1'
    testCompile 'junit:junit:4.12'
    compile project(path: ':jniguard')
    compile 'com.alibaba:fastjson:1.2.23'
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
}

//task hello {
//    print("hello !!! how are you ?" + "\n")
//    doFirst {
//        print("start...")
//    }
//    doLast {
//        print("end...")
//    }
//}
//
//task helloBack {
//    print("hello  !!! i am fine ." + "\n")
//    doFirst {
//        print("start...")
//    }
//    doLast {
//        print("end...")
//    }
//}

//helloBack.mustRunAfter hello
//helloBack.dependsOn hello
